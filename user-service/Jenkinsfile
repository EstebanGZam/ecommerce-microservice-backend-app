pipeline {
    agent any
    
    environment {
        SPRING_PROFILES_ACTIVE = 'dev'
        MAVEN_OPTS = '-Xmx512m'
        SERVICE_NAME = 'user-service'
        VERSION = "${BUILD_NUMBER}"
    }
    
    tools {
        maven 'Maven-3.8.6'
        jdk 'Java-11'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Obteniendo c√≥digo fuente..."
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                echo "üî® Compilando aplicaci√≥n..."
                dir('user-service') {
                    sh 'mvn clean compile'
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                echo "üß™ Ejecutando pruebas unitarias..."
                dir('user-service') {
                    sh '''
                        mvn test \
                        -Dspring.profiles.active=test \
                        -Dmaven.test.failure.ignore=false
                    '''
                }
            }
            post {
                always {
                    dir('user-service') {
                        // Publicar resultados de pruebas
                        publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'
                        
                        // Publicar cobertura de c√≥digo
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: 'target/site/jacoco',
                            reportFiles: 'index.html',
                            reportName: 'Coverage Report'
                        ])
                    }
                }
                success {
                    echo "‚úÖ Todas las pruebas unitarias pasaron"
                }
                failure {
                    echo "‚ùå Las pruebas unitarias fallaron"
                    error("Deteniendo pipeline - pruebas unitarias fallaron")
                }
            }
        }
        
        stage('Package') {
            steps {
                echo "üì¶ Empaquetando aplicaci√≥n..."
                dir('user-service') {
                    sh 'mvn package -DskipTests'
                }
            }
            post {
                success {
                    dir('user-service') {
                        archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                    }
                    echo "‚úÖ Aplicaci√≥n empaquetada correctamente"
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                echo "üê≥ Construyendo imagen Docker..."
                dir('user-service') {
                    script {
                        def imageName = "${SERVICE_NAME}:${VERSION}-dev"
                        def dockerImage = docker.build(imageName)
                        env.DOCKER_IMAGE = imageName
                        
                        // Tag como latest para desarrollo
                        dockerImage.tag("${SERVICE_NAME}:latest-dev")
                    }
                }
            }
            post {
                success {
                    echo "‚úÖ Imagen Docker construida: ${env.DOCKER_IMAGE}"
                }
            }
        }
        
        stage('Deploy to Dev') {
            when {
                anyOf {
                    branch 'develop'
                    branch 'main'
                }
            }
            steps {
                echo "üöÄ Desplegando en entorno de desarrollo..."
                script {
                    // Simular despliegue - aqu√≠ conectar√≠as con tu entorno real
                    sh """
                        echo "Desplegando ${SERVICE_NAME} versi√≥n ${VERSION}"
                        echo "Imagen: ${env.DOCKER_IMAGE}"
                        echo "Perfil: ${SPRING_PROFILES_ACTIVE}"
                        
                        kubectl apply -f k8s-manifests/user-service/
                    """
                }
            }
            post {
                success {
                    echo "‚úÖ Despliegue en DEV completado"
                }
            }
        }
    }
    
    post {
        always {
            echo "üßπ Limpiando recursos..."
            sh 'docker system prune -f --filter until=1h || true'
        }
        
        success {
            script {
                // Generar release notes simples
                def releaseNotes = """
# Release ${SERVICE_NAME} v${VERSION}

**Build:** ${BUILD_NUMBER}  
**Environment:** Development  
**Date:** ${new Date()}  
**Branch:** ${env.BRANCH_NAME}

## Artifacts
- JAR: target/${SERVICE_NAME}-v${VERSION}.jar
- Docker Image: ${env.DOCKER_IMAGE}

## Status
‚úÖ Build successful  
‚úÖ Unit tests passed  
‚úÖ Package created  
‚úÖ Docker image built
"""
                
                writeFile file: 'release-notes.md', text: releaseNotes
                archiveArtifacts artifacts: 'release-notes.md'
            }
            
            echo "üéâ Pipeline completado exitosamente!"
        }
        
        failure {
            echo "üí• Pipeline fall√≥ - revisar logs"
            
            // Notificaci√≥n b√°sica por email (opcional)
            emailext (
                subject: "‚ùå [${SERVICE_NAME}] Build ${BUILD_NUMBER} Failed",
                body: "El build del user-service fall√≥. Ver: ${BUILD_URL}",
                to: "dev-team@company.com"
            )
        }
    }
}